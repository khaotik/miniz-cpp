# miniz.c v1.15
public domain deflate/inflate, zlib-subset, ZIP reading/writing/appending, PNG writing
See "unlicense" statement at the end of this file.
Rich Geldreich <richgel99@gmail.com>, last updated Oct. 13, 2013
Implements RFC 1950: http://www.ietf.org/rfc/rfc1950.txt and RFC 1951: http://www.ietf.org/rfc/rfc1951.txt

Most API's defined in miniz.c are optional. For example, to disable the archive related functions just define
MINIZ_NO_ARCHIVE_APIS, or to get rid of all stdio usage define MINIZ_NO_STDIO (see the list below for more macros).

## Change History
   10/13/13 v1.15 r4 - Interim bugfix release while I work on the next major release with Zip64 support (almost there!):
     - Critical fix for the MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY bug (thanks kahmyong.moon@hp.com) which could cause locate files to not find files. This bug
      would only have occured in earlier versions if you explicitly used this flag, OR if you used mz_zip_extract_archive_file_to_heap() or mz_zip_add_mem_to_archive_file_in_place()
      (which used this flag). If you can't switch to v1.15 but want to fix this bug, just remove the uses of this flag from both helper funcs (and of course don't use the flag).
     - Bugfix in mz_zip_reader_extract_to_mem_no_alloc() from kymoon when pUser_read_buf is not NULL and compressed size is > uncompressed size
     - Fixing mz_zip_reader_extract_*() funcs so they don't try to extract compressed data from directory entries, to account for weird zipfiles which contain zero-size compressed data on dir entries.
       Hopefully this fix won't cause any issues on weird zip archives, because it assumes the low 16-bits of zip external attributes are DOS attributes (which I believe they always are in practice).
     - Fixing mz_zip_reader_is_file_a_directory() so it doesn't check the internal attributes, just the filename and external attributes
     - mz_zip_reader_init_file() - missing MZ_FCLOSE() call if the seek failed
     - Added cmake support for Linux builds which builds all the examples, tested with clang v3.3 and gcc v4.6.
     - Clang fix for tdefl_write_image_to_png_file_in_memory() from toffaletti
     - Merged MZ_FORCEINLINE fix from hdeanclark
     - Fix <time.h> include before config #ifdef, thanks emil.brink
     - Added tdefl_write_image_to_png_file_in_memory_ex(): supports Y flipping (super useful for OpenGL apps), and explicit control over the compression level (so you can
      set it to 1 for real-time compression).
     - Merged in some compiler fixes from paulharris's github repro.
     - Retested this build under Windows (VS 2010, including static analysis), tcc  0.9.26, gcc v4.6 and clang v3.3.
     - Added example6.c, which dumps an image of the mandelbrot set to a PNG file.
     - Modified example2 to help test the MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY flag more.
     - In r3: Bugfix to mz_zip_writer_add_file() found during merge: Fix possible src file fclose() leak if alignment bytes+local header file write faiiled
     - In r4: Minor bugfix to mz_zip_writer_add_from_zip_reader(): Was pushing the wrong central dir header offset, appears harmless in this release, but it became a problem in the zip64 branch
   5/20/12 v1.14 - MinGW32/64 GCC 4.6.1 compiler fixes: added MZ_FORCEINLINE, #include <time.h> (thanks fermtect).
   5/19/12 v1.13 - From jason@cornsyrup.org and kelwert@mtu.edu - Fix mz_crc32() so it doesn't compute the wrong CRC-32's when mz_ulong is 64-bit.
     - Temporarily/locally slammed in "typedef unsigned long mz_ulong" and re-ran a randomized regression test on ~500k files.
     - Eliminated a bunch of warnings when compiling with GCC 32-bit/64.
     - Ran all examples, miniz.c, and tinfl.c through MSVC 2008's /analyze (static analysis) option and fixed all warnings (except for the silly
      "Use of the comma-operator in a tested expression.." analysis warning, which I purposely use to work around a MSVC compiler warning).
     - Created 32-bit and 64-bit Codeblocks projects/workspace. Built and tested Linux executables. The codeblocks workspace is compatible with Linux+Win32/x64.
     - Added miniz_tester solution/project, which is a useful little app derived from LZHAM's tester app that I use as part of the regression test.
     - Ran miniz.c and tinfl.c through another series of regression testing on ~500,000 files and archives.
     - Modified example5.c so it purposely disables a bunch of high-level functionality (MINIZ_NO_STDIO, etc.). (Thanks to corysama for the MINIZ_NO_STDIO bug report.)
     - Fix ftell() usage in examples so they exit with an error on files which are too large (a limitation of the examples, not miniz itself).
   4/12/12 v1.12 - More comments, added low-level example5.c, fixed a couple minor level_and_flags issues in the archive API's.
    level_and_flags can now be set to MZ_DEFAULT_COMPRESSION. Thanks to Bruce Dawson <bruced@valvesoftware.com> for the feedback/bug report.
   5/28/11 v1.11 - Added statement from unlicense.org
   5/27/11 v1.10 - Substantial compressor optimizations:
    - Level 1 is now ~4x faster than before. The L1 compressor's throughput now varies between 70-110MB/sec. on a
    - Core i7 (actual throughput varies depending on the type of data, and x64 vs. x86).
    - Improved baseline L2-L9 compression perf. Also, greatly improved compression perf. issues on some file types.
    - Refactored the compression code for better readability and maintainability.
    - Added level 10 compression level (L10 has slightly better ratio than level 9, but could have a potentially large
     drop in throughput on some files).
   5/15/11 v1.09 - Initial stable release.

## Low-level Deflate/Inflate implementation notes:

   Compression: Use the "tdefl" API's. The compressor supports raw, static, and dynamic blocks, lazy or
   greedy parsing, match length filtering, RLE-only, and Huffman-only streams. It performs and compresses
   approximately as well as zlib.

   Decompression: Use the "tinfl" API's. The entire decompressor is implemented as a single function
   coroutine: see tinfl_decompress(). It supports decompression into a 32KB (or larger power of 2) wrapping buffer, or into a memory
   block large enough to hold the entire file.

   The low-level tdefl/tinfl API's do not make any use of dynamic memory allocation.

## zlib-style API notes:

   miniz.c implements a fairly large subset of zlib. There's enough functionality present for it to be a drop-in
   zlib replacement in many apps:
      The z_stream struct, optional memory allocation callbacks
      deflateInit/deflateInit2/deflate/deflateReset/deflateEnd/deflateBound
      inflateInit/inflateInit2/inflate/inflateEnd
      compress, compress2, compressBound, uncompress
      CRC-32, Adler-32 - Using modern, minimal code size, CPU cache friendly routines.
      Supports raw deflate streams or standard zlib streams with adler-32 checking.

   Limitations:
    The callback API's are not implemented yet. No support for gzip headers or zlib static dictionaries.
    I've tried to closely emulate zlib's various flavors of stream flushing and return status codes, but
    there are no guarantees that miniz.c pulls this off perfectly.

## PNG writing: See the tdefl_write_image_to_png_file_in_memory() function, originally written by
   Alex Evans. Supports 1-4 bytes/pixel images.

## ZIP archive API notes:

   The ZIP archive API's where designed with simplicity and efficiency in mind, with just enough abstraction to
   get the job done with minimal fuss. There are simple API's to retrieve file information, read files from
   existing archives, create new archives, append new files to existing archives, or clone archive data from
   one archive to another. It supports archives located in memory or the heap, on disk (using stdio.h),
   or you can specify custom file read/write callbacks.

   - Archive reading: Just call this function to read a single file from a disk archive:

    void *mz_zip_extract_archive_file_to_heap(const char *pZip_filename, const char *pArchive_name,
      size_t *pSize, mz_uint zip_flags);

   For more complex cases, use the "mz_zip_reader" functions. Upon opening an archive, the entire central
   directory is located and read as-is into memory, and subsequent file access only occurs when reading individual files.

   - Archives file scanning: The simple way is to use this function to scan a loaded archive for a specific file:

   int mz_zip_reader_locate_file(mz_zip_archive *pZip, const char *pName, const char *pComment, mz_uint flags);

   The locate operation can optionally check file comments too, which (as one example) can be used to identify
   multiple versions of the same file in an archive. This function uses a simple linear search through the central
   directory, so it's not very fast.

   Alternately, you can iterate through all the files in an archive (using mz_zip_reader_get_num_files()) and
   retrieve detailed info on each file by calling mz_zip_reader_file_stat().

   - Archive creation: Use the "mz_zip_writer" functions. The ZIP writer immediately writes compressed file data
   to disk and builds an exact image of the central directory in memory. The central directory image is written
   all at once at the end of the archive file when the archive is finalized.

   The archive writer can optionally align each file's local header and file data to any power of 2 alignment,
   which can be useful when the archive will be read from optical media. Also, the writer supports placing
   arbitrary data blobs at the very beginning of ZIP archives. Archives written using either feature are still
   readable by any ZIP tool.

   - Archive appending: The simple way to add a single file to an archive is to call this function:

    mz_bool mz_zip_add_mem_to_archive_file_in_place(const char *pZip_filename, const char *pArchive_name,
      const void *pBuf, size_t buf_size, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags);

   The archive will be created if it doesn't already exist, otherwise it'll be appended to.
   Note the appending is done in-place and is not an atomic operation, so if something goes wrong
   during the operation it's possible the archive could be left without a central directory (although the local
   file headers and file data will be fine, so the archive will be recoverable).

   For more complex archive modification scenarios:
   1. The safest way is to use a mz_zip_reader to read the existing archive, cloning only those bits you want to
   preserve into a new archive using using the mz_zip_writer_add_from_zip_reader() function (which compiles the
   compressed file data as-is). When you're done, delete the old archive and rename the newly written archive, and
   you're done. This is safe but requires a bunch of temporary disk space or heap memory.

   2. Or, you can convert an mz_zip_reader in-place to an mz_zip_writer using mz_zip_writer_init_from_reader(),
   append new files as needed, then finalize the archive which will write an updated central directory to the
   original archive. (This is basically what mz_zip_add_mem_to_archive_file_in_place() does.) There's a
   possibility that the archive's central directory could be lost with this method if anything goes wrong, though.

   - ZIP archive support limitations:
   No zip64 or spanning support. Extraction functions can only handle unencrypted, stored or deflated files.
   Requires streams capable of seeking.

## Guidelines

- This is a header file library, like stb_image.c. To get only a header file, either cut and paste the below header, or create miniz.h, #define MINIZ_HEADER_FILE_ONLY, and then include miniz.c from it.

- Important: For best perf. be sure to customize the below macros for your target platform:
`
   #define MINIZ_USE_UNALIGNED_LOADS_AND_STORES 1
   #define MINIZ_LITTLE_ENDIAN 1
   #define MINIZ_HAS_64BIT_REGISTERS 1
`
- On platforms using glibc, Be sure to "#define _LARGEFILE64_SOURCE 1" before including miniz.c to ensure miniz
   uses the 64-bit variants: fopen64(), stat64(), etc. Otherwise you won't be able to process large files
   (i.e. 32-bit stat() fails for me on files > 0x7FFFFFFF bytes).
